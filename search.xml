<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS 基础总结 1/7</title>
      <link href="/2021/07/19/css-1-7/"/>
      <url>/2021/07/19/css-1-7/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-基础总结-1-7"><a href="#CSS-基础总结-1-7" class="headerlink" title="CSS 基础总结 1/7"></a>CSS 基础总结 1/7</h1><h2 id="1-CSS-简介"><a href="#1-CSS-简介" class="headerlink" title="1 CSS 简介"></a>1 CSS 简介</h2><h3 id="1-1-CSS-的作用"><a href="#1-1-CSS-的作用" class="headerlink" title="1.1 CSS 的作用"></a>1.1 CSS 的作用</h3><ol><li>HTML 主要做结构，显示元素内容。</li><li>CSS 用于美化 HTML，布局网页。</li><li>CSS 最大价值: 由 HTML 专注去做结构呈现，样式交给 CSS，即结构（HTML）与样式（CSS）相分离。</li></ol><h3 id="1-2-CSS-语法规范"><a href="#1-2-CSS-语法规范" class="headerlink" title="1.2 CSS 语法规范"></a>1.2 CSS 语法规范</h3><p>CSS 规则由两个主要的部分构成：选择器以及一条或多条声明。</p><p><img src="image-20210719184810221.png" alt="image-20210719184810221"></p><ul><li>选择器是用于指定 CSS 样式的 HTML 标签，花括号内是对该对象设置的具体样式。</li><li>属性和属性值以“键值对”的形式出现。</li><li>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。</li><li>属性和属性值之间用英文“:”分开。</li><li>多个“键值对”之间用英文“;”进行区分。</li></ul><p>所有的样式，都包含在 <code>&lt;style&gt;</code>  标签内，表示是样式表。 <code>&lt;style&gt;</code>  一般写到 <code>&lt;/head&gt;</code> 上方。 </p><pre class="line-numbers language-none"><code class="language-none">&lt;head&gt;&lt;style&gt;h4 {color: blue;font-size: 100px;}&lt;/style&gt;&lt;/head&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-CSS-推荐代码风格"><a href="#1-3-CSS-推荐代码风格" class="headerlink" title="1.3 CSS 推荐代码风格"></a>1.3 CSS 推荐代码风格</h3><ol><li>展开格式</li></ol><pre class="line-numbers language-none"><code class="language-none">h3 { color: pink; font-size: 20px; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>全部小写</li></ol><p>样式选择器，属性名，属性值关键字全部使用小写字母。</p><ol start="3"><li><p>空格规范</p><ol><li>属性值前面，冒号后面，保留一个空格；</li><li>选择器（标签）和大括号中间保留空格。</li></ol></li></ol><h2 id="2-CSS-基础选择器"><a href="#2-CSS-基础选择器" class="headerlink" title="2 CSS 基础选择器"></a>2 CSS 基础选择器</h2><h3 id="2-1-选择器的作用"><a href="#2-1-选择器的作用" class="headerlink" title="2.1 选择器的作用"></a>2.1 选择器的作用</h3><p>选对指定的标签，设置正确的标签样式。</p><h3 id="2-2-选择器分类"><a href="#2-2-选择器分类" class="headerlink" title="2.2 选择器分类"></a>2.2 选择器分类</h3><p>分为<strong>基础选择器</strong>和<strong>复合选择器</strong>两个大类。</p><p>基础选择器：</p><ul><li><p>基础选择器是由单个选择器组成的</p></li><li><p>基础选择器又包括：标签选择器、类选择器、id 选择器和通配符选择器</p></li></ul><h3 id="2-3-标签选择器"><a href="#2-3-标签选择器" class="headerlink" title="2.3 标签选择器"></a>2.3 标签选择器</h3><p>   标签选择器（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。</p><ul><li>语法：</li></ul><pre class="line-numbers language-none"><code class="language-none">标签名{   属性1: 属性值1;    属性2: 属性值2;    属性3: 属性值3;    ...} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>作用：标签选择器可以把某一类标签全部选择出来，比如所有的 <code>&lt;div&gt;</code> 标签和所有的 <code>&lt;span&gt;</code> 标签。</p></li><li><p>优点：能快速为页面中同类型的标签统一设置样式。</p></li><li><p>缺点：不能设计差异化样式，只能选择全部的当前标签。</p></li></ul><h3 id="2-4-类选择器"><a href="#2-4-类选择器" class="headerlink" title="2.4 类选择器"></a>2.4 类选择器</h3><p>   如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用类选择器。</p><p>   类选择器在 HTML 中以 class 属性表示，在 CSS 中，类选择器以一个点“.”号显示。</p><ul><li>语法：</li></ul><pre class="line-numbers language-none"><code class="language-none">.类名 { 属性1: 属性值1;  ...} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  例如，将所有拥有 red 类的 HTML 元素均为红色。 </p><pre class="line-numbers language-none"><code class="language-none">.red { color: red; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>  构需要用<strong>class属性</strong>来调用 class 类的意思:</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class=‘red’&gt; 变红色 &lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注意<ol><li>类选择器使用“.”（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）。 </li><li>可以理解为给这个标签起了一个名字，来表示。</li><li>长名称或词组可以使用中横线来为选择器命名。</li></ol></li></ul><p><strong>多类名</strong></p><p>我们可以给一个标签指定多个类名，从而达到更多的选择目的。 这些类名都可以选出这个标签。 简单理解就是一个标签有多个名字。</p><pre class="line-numbers language-none"><code class="language-none">&lt;div class="red font20"&gt;亚瑟&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>多类名使用方式</p><ol><li>在标签 class 属性中写多个类名 </li><li>多个类名中间必须用空格分开</li><li>这个标签就可以分别具有这些类名的样式</li></ol></li><li><p>多类名开发中使用场景</p><ol><li>可以把一些标签元素相同的样式（共同的部分）放到一个类里面。</li><li>这些标签都可以调用这个公共的类和自己独有的类。</li><li>从而节省CSS代码，方便统一修改。</li></ol></li></ol><h3 id="2-5-id-选择器"><a href="#2-5-id-选择器" class="headerlink" title="2.5 id 选择器"></a>2.5 id 选择器</h3><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。 HTML 元素以 id 属性来设置 id 选择器，CSS 中 id 选择器以“#” 来定义。</p><ul><li>语法</li></ul><pre class="line-numbers language-none"><code class="language-none">#id名 { 属性1: 属性值1;  ...}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>例如，将 id 为 nav 元素中的内容设置为红色。</p><pre class="line-numbers language-none"><code class="language-none">#nav { color:red;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>id 属性只能在每个 HTML 文档中出现一次。</p><p><strong>id 选择器和类选择器的区别</strong></p><ol><li>类选择器（class）好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用。</li><li>id 选择器好比人的身份证号码，是唯一的，不得重复。 </li><li>id 选择器和类选择器最大的不同在于使用次数上。 </li><li>类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用。</li></ol><h3 id="2-6-通配符选择器"><a href="#2-6-通配符选择器" class="headerlink" title="2.6 通配符选择器"></a>2.6 通配符选择器</h3><p>在 CSS 中，通配符选择器使用“*”定义，它表示选取页面中所有元素（标签）。</p><ul><li>语法</li></ul><pre class="line-numbers language-none"><code class="language-none">* { 属性1: 属性值1;  ...} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通配符选择器不需要调用， 自动就给所有的元素使用样式。在特殊情况下才使用。</p><pre class="line-numbers language-none"><code class="language-none">* { margin: 0; padding: 0;} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-基础选择器总结"><a href="#2-7-基础选择器总结" class="headerlink" title="2.7 基础选择器总结"></a>2.7 基础选择器总结</h3><p><img src="image-20210719192838584.png" alt="image-20210719192838584"></p><p> 如果是修改样式， 类选择器是使用最多的。</p><h2 id="3-CSS-字体属性"><a href="#3-CSS-字体属性" class="headerlink" title="3 CSS 字体属性"></a>3 CSS 字体属性</h2><p>CSS Fonts (字体)属性用于定义字体系列、大小、粗细、和文字样式（如斜体）。</p><h3 id="3-1-字体系列-font-family"><a href="#3-1-字体系列-font-family" class="headerlink" title="3.1 字体系列 font-family"></a>3.1 字体系列 font-family</h3><pre class="line-numbers language-none"><code class="language-none">p { font-family:"微软雅黑";} div {font-family: Arial,"Microsoft Yahei", "微软雅黑";}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>各种字体之间必须使用英文状态下的逗号隔开</li><li>一般情况下，如果有空格隔开的多个单词组成的字体，加引号</li><li>尽量使用系统默认自带字体，保证在任何用户的浏览器中都能正确显示</li><li>最常见的几个字体：body {font-family: ‘Microsoft YaHei’,tahoma,arial,’Hiragino Sans GB’; }</li></ul><h3 id="3-2-字体大小-font-size"><a href="#3-2-字体大小-font-size" class="headerlink" title="3.2 字体大小 font-size"></a>3.2 字体大小 font-size</h3><pre class="line-numbers language-none"><code class="language-none">p {  font-size: 20px; }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-3-字体粗细-font-weight"><a href="#3-3-字体粗细-font-weight" class="headerlink" title="3.3 字体粗细 font-weight"></a>3.3 字体粗细 font-weight</h3><pre class="line-numbers language-none"><code class="language-none">p {  font-weight: bold;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20210719193250229.png" alt="image-20210719193250229"></p><h3 id="3-4-文字样式-font-style"><a href="#3-4-文字样式-font-style" class="headerlink" title="3.4 文字样式  font-style"></a>3.4 文字样式  font-style</h3><pre class="line-numbers language-none"><code class="language-none">p {  font-style: normal;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20210719193345332.png" alt="image-20210719193345332"></p><h3 id="3-5-字体复合属性"><a href="#3-5-字体复合属性" class="headerlink" title="3.5 字体复合属性"></a>3.5 字体复合属性</h3><pre class="line-numbers language-none"><code class="language-none">body {  font: font-style font-weight font-size/line-height font-family;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>使用 font 属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开</li><li>不需要设置的属性可以省略（取默认值），但必须保留 font-size 和 font-family 属性，否则 font 属性将不起作用</li></ul><h3 id="3-6-字体属性总结"><a href="#3-6-字体属性总结" class="headerlink" title="3.6 字体属性总结"></a>3.6 字体属性总结</h3><p><img src="image-20210719193627743.png" alt="image-20210719193627743"></p><h2 id="4-CSS-文本属性"><a href="#4-CSS-文本属性" class="headerlink" title="4 CSS 文本属性"></a>4 CSS 文本属性</h2><p>CSS Text（文本）属性可定义文本的外观，比如文本的颜色、对齐文本、装饰文本、文本缩进、行间距等。</p><h3 id="4-1-文本颜色-color"><a href="#4-1-文本颜色-color" class="headerlink" title="4.1 文本颜色 color"></a>4.1 文本颜色 color</h3><pre class="line-numbers language-none"><code class="language-none">div {  color: red;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20210719193920785.png" alt="image-20210719193920785"></p><p>开发中最常用的是十六进制</p><h3 id="4-2-对齐文本-text-align"><a href="#4-2-对齐文本-text-align" class="headerlink" title="4.2 对齐文本 text-align"></a>4.2 对齐文本 text-align</h3><pre class="line-numbers language-none"><code class="language-none">div {  text-align: center;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20210719194011034.png" alt="image-20210719194011034"></p><h3 id="4-3-装饰文本-text-decoration"><a href="#4-3-装饰文本-text-decoration" class="headerlink" title="4.3 装饰文本 text-decoration"></a>4.3 装饰文本 text-decoration</h3><pre class="line-numbers language-none"><code class="language-none">div {  text-decoration：underline；}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20210719194101748.png" alt="image-20210719194101748"></p><h3 id="4-4-文本缩进-text-indent"><a href="#4-4-文本缩进-text-indent" class="headerlink" title="4.4 文本缩进 text-indent"></a>4.4 文本缩进 text-indent</h3><p>text-indent 属性用来指定文本的第一行的缩进，通常是将段落的首行缩进。</p><pre class="line-numbers language-none"><code class="language-none">div {  /* text-indent: 10px; */ text-indent: 2em;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过设置该属性，所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值。</p><p>em 是一个相对单位，就是当前元素（font-size) 1 个文字的大小, 如果当前元素没有设置大小，则会按照父元 素的 1 个文字大小。</p><h3 id="4-5-行间距-line-height"><a href="#4-5-行间距-line-height" class="headerlink" title="4.5 行间距 line-height"></a>4.5 行间距 line-height</h3><p>line-height 属性用于设置行间的距离（行高）。可以控制文字行与行之间的距离。</p><pre class="line-numbers language-none"><code class="language-none">p {  line-height: 26px;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20210719194423651.png" alt="image-20210719194423651"></p><h3 id="4-6-文本属性总结"><a href="#4-6-文本属性总结" class="headerlink" title="4.6 文本属性总结"></a>4.6 文本属性总结</h3><p><img src="image-20210719194459302.png" alt="image-20210719194459302"></p><h2 id="5-CSS-的引入方式"><a href="#5-CSS-的引入方式" class="headerlink" title="5 CSS 的引入方式"></a>5 CSS 的引入方式</h2><h3 id="5-1-CSS-的三种样式表"><a href="#5-1-CSS-的三种样式表" class="headerlink" title="5.1 CSS 的三种样式表"></a>5.1 CSS 的三种样式表</h3><p>按照 CSS 样式书写的位置（或者引入的方式），CSS 样式表可以分为三大类： </p><ol><li>行内样式表（行内式） </li><li>内部样式表（嵌入式） </li><li>外部样式表（链接式）</li></ol><h3 id="5-2-内部样式表"><a href="#5-2-内部样式表" class="headerlink" title="5.2 内部样式表"></a>5.2 内部样式表</h3><p>内部样式表（内嵌样式表）是写到 HTML 页面内部. 是将所有的 CSS 代码抽取出来，单独放到一个 <code>&lt;style&gt;</code> 标签中。</p><pre class="line-numbers language-none"><code class="language-none">&lt;style&gt; div { color: red; font-size: 12px; }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>&lt;style&gt;</code> 标签理论上可以放在 HTML 文档的任何地方，但一般会放在文档的 <code>&lt;head&gt;</code> 标签中</li><li>通过此种方式，可以方便控制当前整个页面中的元素样式设置</li><li>代码结构清晰，但是并没有实现结构与样式完全分离</li><li>使用内部样式表设定 CSS，通常也被称为嵌入式引入，这种方式是我们练习时常用的方式</li></ol><h3 id="5-3-行内样式表"><a href="#5-3-行内样式表" class="headerlink" title="5.3 行内样式表"></a>5.3 行内样式表</h3><p>行内样式表（内联样式表）是在元素标签内部的 style 属性中设定 CSS 样式。适合于修改简单样式。</p><pre class="line-numbers language-none"><code class="language-none">&lt;div style="color: red; font-size: 12px;"&gt;内容&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>style 其实就是标签的属性，在双引号中间，写法要符合 CSS 规范 </li><li>可以控制当前的标签设置样式 </li><li>由于书写繁琐，并且没有体现出结构与样式相分离的思想，所以不推荐大量使用，只有对当前元素添加简 单样式的时候，可以考虑使用 </li><li>使用行内样式表设定 CSS，通常也被称为行内式引入</li></ul><h3 id="5-4-外部样式表"><a href="#5-4-外部样式表" class="headerlink" title="5.4 外部样式表"></a>5.4 外部样式表</h3><p>实际开发都是外部样式表. 适合于样式比较多的情况. 核心是:样式单独写到CSS 文件中，之后把CSS文件引入 到 HTML 页面中使用。</p><p>引入外部样式表分为两步：</p><ol><li>新建一个后缀名为 .css 的样式文件，把所有 CSS 代码都放入此文件中。 </li><li>在 HTML 页面中，使用 标签引入这个文件。</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;link rel="stylesheet" href="css文件路径"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20210719195028696.png" alt="image-20210719195028696"></p><p>使用外部样式表设定 CSS，通常也被称为外链式或链接式引入，这种方式是开发中常用的方式</p><h3 id="5-5-CSS-引入方式总结"><a href="#5-5-CSS-引入方式总结" class="headerlink" title="5.5 CSS 引入方式总结"></a>5.5 CSS 引入方式总结</h3><p><img src="image-20210719195121023.png" alt="image-20210719195121023"></p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> CSS </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 的基本用法</title>
      <link href="/2021/07/19/git-de-ji-ben-yong-fa/"/>
      <url>/2021/07/19/git-de-ji-ben-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Git使用的基本技巧"><a href="#Git使用的基本技巧" class="headerlink" title="Git使用的基本技巧"></a>Git使用的基本技巧</h1><h2 id="1-什么是-Git"><a href="#1-什么是-Git" class="headerlink" title="1 什么是 Git"></a>1 什么是 Git</h2><p>Git 是用于Linux内核开发的版本控制工具。与 CVS、 Subversion 一类的集中式版本控制工具不同，它采用了分布式版本库的作法，不需要服务器端软件，就可以运作版本控制，使得源代码的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux 内核这样的大项目来说自然很重要。 Git 最为出色的是它的合并追踪（merge tracing）能力。</p><h2 id="2-Git-的安装"><a href="#2-Git-的安装" class="headerlink" title="2 Git 的安装"></a>2 Git 的安装</h2><h3 id="2-1-安装-Git"><a href="#2-1-安装-Git" class="headerlink" title="2.1 安装 Git"></a>2.1 安装 Git</h3><p>从官网上下载 Git 安装即可。在任一文件夹中右键出现<code>Git Bash Here</code>，点击该选项能打开命令窗口，即表示安装成功。</p><p>首先需要设置全局参数：名字和邮箱地址。</p><pre class="line-numbers language-none"><code class="language-none">$ git config --global user.name "Your Name"$ git config --global user.email "email@example.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输入git config –global –list命令可以显示设置过的全局变量，如下：</p><pre class="line-numbers language-none"><code class="language-none">$ git config --global --listcore.editor="D:\Microsoft VS Code\Code.exe" --waituser.name=tzhiyuser.email=2570986081@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-创建版本库"><a href="#2-2-创建版本库" class="headerlink" title="2.2 创建版本库"></a>2.2 创建版本库</h3><p><strong>版本库</strong>又名仓库，英文名 repository ，你可以简单理解成一个目录，这个目录里面的所有文件都可以被 Git 管理起来，每个文件的修改、删除，Git 都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><p>所以，创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录。</p><p>第二步，通过<code>git init</code>命令把这个目录变成 Git 可以管理的仓库。</p><pre class="line-numbers language-none"><code class="language-none">$ cd /e/githubup$ mkdir demo$ cd /e/githubup/demo$ pwd/e/githubup/demo$ git initInitialized empty Git repository in E:/GitHubUp/demo/.git/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以发现，在文件夹内新增了一个以 .git 命名的隐藏文件。到这里，一个真正的仓库就创建好了!</p><h2 id="3-Git-的目录结构"><a href="#3-Git-的目录结构" class="headerlink" title="3 Git 的目录结构"></a>3 Git 的目录结构</h2><p>在使用 Git 之前，我们要了解 Git 的主要结构是什么。</p><p>git中加入了暂存区的概念，分为工作区，版本库中的暂存区，分支等概念。git版本库的模型如下图所示：</p><p><img src="GitConstruction.png"></p><p>上图描述了 git 对象的在不同的生命周期中不同的存储位置，通过不同的 git 命令改变 git 对象的存储生命周期。</p><ol><li><p>工作区(workspace)</p><p> 就是我们当前工作空间，也就是我们当前能在本地文件夹下面看到的文件结构。初始化工作空间或者工作空间 clean 的时候，文件内容和 index 暂存区是一致的，随着修改，工作区文件在没有 add 到暂存区时候，工作区将和暂存区是不一致的。</p></li><li><p>暂存区 (index)</p><p> 老版本概念也叫 Cache 区，就是文件暂时存放的地方，所有暂时存放在暂存区中的文件将随着一个 commit 一起提交到 local repository 此时 local repository 里面文件将完全被暂存区所取代。暂存区是 git 架构设计中非常重要和难理解的一部分。</p></li><li><p>本地仓库 (local repository)</p><p> git 是分布式版本控制系统，和其他版本控制系统不同的是他可以完全去中心化工作，你可以不用和中央服务器 (remote server) 进行通信，在本地即可进行全部离线操作，包括 log，history，commit，diff 等等。完成离线操作最核心是因为 git 有一个几乎和远程一样的本地仓库，所有本地离线操作都可以在本地完成，等需要的时候再和远程服务进行交互。</p></li><li><p>远程仓库 (remote repository)</p><p> 中心化仓库，所有人共享，本地仓库会需要和远程仓库进行交互，也就能将其他所有人内容更新到本地仓库把自己内容上传分享给其他人。结构大体和本地仓库一样。</p></li></ol><p>使用 Git 命令后文件的变化</p><p><img src="GitCommand.png"></p><p>Git管理的是修改，当使用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p><p>所以在每次使用git commit之前，所有修改过的文件都必须重新进行git add，将工作区(workspace)中的修改提交到暂存区(index)中，否则即使进行了git commit本地仓库中也将不会出现修改。</p><h2 id="4-版本管理"><a href="#4-版本管理" class="headerlink" title="4 版本管理"></a>4 版本管理</h2><h3 id="4-1-添加文件到版本库"><a href="#4-1-添加文件到版本库" class="headerlink" title="4.1 添加文件到版本库"></a>4.1 添加文件到版本库</h3><h4 id="4-1-1-在刚创建的-Git-仓库下创建一个-readme-txt-文件"><a href="#4-1-1-在刚创建的-Git-仓库下创建一个-readme-txt-文件" class="headerlink" title="4.1.1 在刚创建的 Git 仓库下创建一个 readme.txt 文件:"></a>4.1.1 在刚创建的 Git 仓库下创建一个 <code>readme.txt</code> 文件:</h4><pre class="line-numbers language-none"><code class="language-none">this is readme.txthello git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-1-2-使用-git-add-命令将文件提交到暂存区。"><a href="#4-1-2-使用-git-add-命令将文件提交到暂存区。" class="headerlink" title="4.1.2 使用 git add 命令将文件提交到暂存区。"></a>4.1.2 使用 <code>git add</code> 命令将文件提交到暂存区。</h4><pre class="line-numbers language-none"><code class="language-none">$ git add readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用 <code>git add .</code>来一次性提交所有的改动。</p><h4 id="4-1-3-使用-git-commit-命令将文件提交到本地仓库。"><a href="#4-1-3-使用-git-commit-命令将文件提交到本地仓库。" class="headerlink" title="4.1.3 使用 git commit 命令将文件提交到本地仓库。"></a>4.1.3 使用 <code>git commit</code> 命令将文件提交到本地仓库。</h4><pre class="line-numbers language-none"><code class="language-none">$ git commit -m "new readme file"[master (root-commit) ea52515] new readme file 1 file changed, 2 insertions(+) create mode 100644 readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>-m</code> 后面输入的是本次提交的说明。</p><h3 id="4-2-状态管理"><a href="#4-2-状态管理" class="headerlink" title="4.2 状态管理"></a>4.2 状态管理</h3><h4 id="4-2-1-修改-readme-txt-文件为如下"><a href="#4-2-1-修改-readme-txt-文件为如下" class="headerlink" title="4.2.1 修改 readme.txt 文件为如下"></a>4.2.1 修改 readme.txt 文件为如下</h4><pre class="line-numbers language-none"><code class="language-none">this is a file named readme.txthello git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-2-2-使用-git-status-查看当前状态"><a href="#4-2-2-使用-git-status-查看当前状态" class="headerlink" title="4.2.2 使用 git status 查看当前状态"></a>4.2.2 使用 <code>git status</code> 查看当前状态</h4><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masterChanges not staged for commit:  (use "git add &lt;file&gt;..." to update what will be committed)  (use "git restore &lt;file&gt;..." to discard changes in working directory)        modified:   readme.txtno changes added to commit (use "git add" and/or "git commit -a")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>git status</code> 命令可以让我们时刻掌握仓库当前的状态，上面的命令输出告诉我们，readme.txt 被修改过了，但还没有准备提交的修改。</p><h4 id="4-2-3-使用-git-diff-查看修改的内容"><a href="#4-2-3-使用-git-diff-查看修改的内容" class="headerlink" title="4.2.3 使用 git diff 查看修改的内容"></a>4.2.3 使用 <code>git diff</code> 查看修改的内容</h4><pre class="line-numbers language-none"><code class="language-none">$ git diffdiff --git a/readme.txt b/readme.txtindex 4ead6b0..2d611cb 100644--- a/readme.txt+++ b/readme.txt@@ -1,2 +1,2 @@-this is readme.txt+this is a file named readme.txt hello git\ No newline at end of file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到文件的被修改的状况。</p><h4 id="4-2-4-使用-git-status-查看-add-之后的状态"><a href="#4-2-4-使用-git-status-查看-add-之后的状态" class="headerlink" title="4.2.4 使用 git status 查看 add 之后的状态"></a>4.2.4 使用 <code>git status</code> 查看 add 之后的状态</h4><p>首先提交修改到暂存区。</p><pre class="line-numbers language-none"><code class="language-none">$ git add .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 <code>git status</code> 查看当前状态。</p><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masterChanges to be committed:  (use "git restore --staged &lt;file&gt;..." to unstage)        modified:   readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Git 告诉我们将要被提交的修改包括 readme.txt。</p><p>提交到本地仓库。</p><pre class="line-numbers language-none"><code class="language-none">$ git commit -m "readme.txt version2"[master 6daed76] readme.txt version2 1 file changed, 1 insertion(+), 1 deletion(-)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再次使用 <code>git status</code> 查看当前状态。</p><pre class="line-numbers language-none"><code class="language-none">$ git statusOn branch masternothing to commit, working tree clean<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Git 告诉我们当前没有需要提交的修改，工作目录是干净（working tree clean）的。</p><h3 id="4-3-版本回退"><a href="#4-3-版本回退" class="headerlink" title="4.3 版本回退"></a>4.3 版本回退</h3><p>在 Git 中，每当你觉得文件修改到一定程度的时候，就可以“保存一个快照”，这个快照在 Git 中被称为 commit。一旦你把文件改乱了，或者误删了文件，还可以从最近的一个 commit 恢复，然后继续工作，而不是把几个月的工作成果全部丢失。下面对这个功能进行演示。</p><h4 id="4-3-1-再次修改-readme-txt，并提交到本地仓库"><a href="#4-3-1-再次修改-readme-txt，并提交到本地仓库" class="headerlink" title="4.3.1 再次修改 readme.txt，并提交到本地仓库"></a>4.3.1 再次修改 readme.txt，并提交到本地仓库</h4><p>修改后的 readme.txt：</p><pre class="line-numbers language-none"><code class="language-none">this is a file named readme.txthello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>提交到本地仓库：</p><pre class="line-numbers language-none"><code class="language-none">$ git add .$ git commit -m "readme.txt version3"[master 4a6cf89] readme.txt version3 1 file changed, 1 insertion(+), 1 deletion(-)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3-2-使用-git-log-命令查看版本库状态"><a href="#4-3-2-使用-git-log-命令查看版本库状态" class="headerlink" title="4.3.2 使用 git log 命令查看版本库状态"></a>4.3.2 使用 <code>git log</code> 命令查看版本库状态</h4><pre class="line-numbers language-none"><code class="language-none">$ git logcommit 4a6cf892a3b737a8e95934acac251bb60d118068 (HEAD -&gt; master)Author: tzhiy &lt;2570986081@qq.com&gt;Date:   Sun Jul 18 15:37:04 2021 +0800    readme.txt version3commit 6daed765e7b45a03c96fcb658f5e61b6a170b438Author: tzhiy &lt;2570986081@qq.com&gt;Date:   Sun Jul 18 15:19:22 2021 +0800    readme.txt version2commit ea5251506b165792227d36ad8f874e403760d5baAuthor: tzhiy &lt;2570986081@qq.com&gt;Date:   Sun Jul 18 15:04:44 2021 +0800    new readme file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>git log</code> 命令显示从最近到最远的提交日志。commit id 就是版本号。HEAD 表示当前的版本，上一个版本用 HEAD^ 表示，上上一个用 HEAD^^ 表示，上 100 个版本用 HEAD~100 表示。</p><h4 id="4-3-3-使用-git-reset-命令回退到以前的版本"><a href="#4-3-3-使用-git-reset-命令回退到以前的版本" class="headerlink" title="4.3.3 使用 git reset 命令回退到以前的版本"></a>4.3.3 使用 <code>git reset</code> 命令回退到以前的版本</h4><pre class="line-numbers language-none"><code class="language-none">$ git reset --hard HEAD^HEAD is now at 6daed76 readme.txt version2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到readme.txt 的内容回退到version2：</p><pre class="line-numbers language-none"><code class="language-none">this is a file named readme.txthello git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次使用 <code>git log</code> 查看版本库状态：</p><pre class="line-numbers language-none"><code class="language-none">$ git logcommit 6daed765e7b45a03c96fcb658f5e61b6a170b438 (HEAD -&gt; master)Author: tzhiy &lt;2570986081@qq.com&gt;Date:   Sun Jul 18 15:19:22 2021 +0800    readme.txt version2commit ea5251506b165792227d36ad8f874e403760d5baAuthor: tzhiy &lt;2570986081@qq.com&gt;Date:   Sun Jul 18 15:04:44 2021 +0800    new readme file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到 version3 版本不见了，那怎么通过刚刚的方法回到 version3 版本呢？我们还可以用 commit id 跳转到其它的版本，可以通过之前的版本库状态查到 version3 的 commit id 是 4a6cf89…：</p><pre class="line-numbers language-none"><code class="language-none">$ git reset --hard 4a6cfHEAD is now at 4a6cf89 readme.txt version3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>又回到 version3 了！</p><p>Git 的版本回退速度非常快，因为 Git 在内部有个指向当前版本的 HEAD 指针，当你回退版本的时候， Git 仅仅是把 HEAD 从指向 version3。</p><h4 id="4-3-4-使用-git-reflog-命令查看每一次改动"><a href="#4-3-4-使用-git-reflog-命令查看每一次改动" class="headerlink" title="4.3.4 使用 git reflog 命令查看每一次改动"></a>4.3.4 使用 <code>git reflog</code> 命令查看每一次改动</h4><p>你回退到了某个版本，关掉了电脑之后想恢复到新版本怎么办？找不到新版本的commit id怎么办？Git提供了一个命令 <code>git reflog</code> 用来记录你的每一次命令：</p><pre class="line-numbers language-none"><code class="language-none">$ git reflog4a6cf89 (HEAD -&gt; master) HEAD@{0}: reset: moving to 4a6cf6daed76 HEAD@{1}: reset: moving to HEAD^4a6cf89 (HEAD -&gt; master) HEAD@{2}: commit: readme.txt version36daed76 HEAD@{3}: commit: readme.txt version2ea52515 HEAD@{4}: commit (initial): new readme file<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在我们就可以知道每次执行命令所对应的 commit id 了。</p><h3 id="4-4-撤销修改"><a href="#4-4-撤销修改" class="headerlink" title="4.4 撤销修改"></a>4.4 撤销修改</h3><h4 id="4-4-1-丢弃工作区的修改"><a href="#4-4-1-丢弃工作区的修改" class="headerlink" title="4.4.1 丢弃工作区的修改"></a>4.4.1 丢弃工作区的修改</h4><p>场景 1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 <code>git checkout -- file</code>。</p><p>命令 <code>git checkout -- readme.txt</code> 意思就是，把 readme.txt 文件在工作区的修改全部撤销，这里有两种情况：</p><ol><li><p>readme.txt 自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p></li><li><p>readme.txt 已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p></li></ol><p>总之，就是让这个文件回到最近一次 <code>git commit</code> 或 <code>git add</code> 时的状态。</p><p>例如，将 readme.txt 的内容作修改:</p><pre class="line-numbers language-none"><code class="language-none">this is a file named readme.txthello worldbalabala<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">$ git checkout -- readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>撤销后的 readme.txt:</p><pre class="line-numbers language-none"><code class="language-none">this is a file named readme.txthello world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-4-2-丢弃暂存区的修改"><a href="#4-4-2-丢弃暂存区的修改" class="headerlink" title="4.4.2 丢弃暂存区的修改"></a>4.4.2 丢弃暂存区的修改</h4><p>场景 2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 <code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景 1 操作。</p><p>用命令 <code>git reset HEAD &lt;file&gt;</code> 可以把暂存区的修改撤销掉（unstage），重新放回工作区。</p><pre class="line-numbers language-none"><code class="language-none">$ git reset HEAD readme.txtUnstaged changes after reset:Mreadme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>git reset</code> 命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用 HEAD 时，表示最新的版本。</p><h4 id="4-4-3-丢弃本地仓库的修改"><a href="#4-4-3-丢弃本地仓库的修改" class="headerlink" title="4.4.3 丢弃本地仓库的修改"></a>4.4.3 丢弃本地仓库的修改</h4><p>场景 3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p><h2 id="5-远程仓库"><a href="#5-远程仓库" class="headerlink" title="5 远程仓库"></a>5 远程仓库</h2><h2 id="6-分支管理"><a href="#6-分支管理" class="headerlink" title="6 分支管理"></a>6 分支管理</h2><p>参考：</p><ol><li>Git - 维基百科</li><li>廖雪峰的官方网站</li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 基础总结</title>
      <link href="/2021/07/17/chu-shi-html/"/>
      <url>/2021/07/17/chu-shi-html/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML-基础总结"><a href="#HTML-基础总结" class="headerlink" title="HTML 基础总结"></a>HTML 基础总结</h1><h2 id="HTML-简介"><a href="#HTML-简介" class="headerlink" title="HTML 简介"></a>HTML 简介</h2><h3 id="1-网页"><a href="#1-网页" class="headerlink" title="1 网页"></a>1 网页</h3><h4 id="1-1-什么是网页"><a href="#1-1-什么是网页" class="headerlink" title="1.1 什么是网页"></a>1.1 什么是网页</h4><p><strong>网站</strong>是指在因特网上根据一定的规则，使用 HTML 等制作的用于展示特定内容相关的网页集合。  </p><p><strong>网页</strong>是构成网站的基本元素，它通常由图片、链接、文字、声音、视频等元素组成。通常我们看到的网页，常见以 .htm 或 .html 后缀结尾的文件，因此将其俗称为 HTML 文件。  </p><h4 id="1-2-什么是-HTML"><a href="#1-2-什么是-HTML" class="headerlink" title="1.2 什么是 HTML"></a>1.2 什么是 HTML</h4><p><strong>HTML</strong> 指的是<strong>超文本标记语言 (Hyper Text Markup Language)</strong> ，它是用来描述网页的一种语言，由标签组成。  </p><p>超文本：超越文本限制，超级链接文本。  </p><h4 id="1-3-网页的形成"><a href="#1-3-网页的形成" class="headerlink" title="1.3 网页的形成"></a>1.3 网页的形成</h4><p>网页是由网页元素组成的，这些元素是利用 HTML 标签描述出来，然后通过浏览器解析来显示给用户的。  </p><p>前端人员开发代码 —-&gt; 浏览器显示代码（解析、渲染） —-&gt; 生成最后的 Web 页面  </p><h3 id="2-常用浏览器"><a href="#2-常用浏览器" class="headerlink" title="2 常用浏览器"></a>2 常用浏览器</h3><h3 id="3-Web-标准"><a href="#3-Web-标准" class="headerlink" title="3 Web 标准"></a>3 Web 标准</h3><p><strong>Web 标准</strong>是由 W3C 组织和其他标准化组织制定的<strong>一系列标准的集合</strong>。W3C（万维网联盟）是国际最著名的标准化组织。  </p><h4 id="3-1-为什么要学习-Web-标准"><a href="#3-1-为什么要学习-Web-标准" class="headerlink" title="3.1 为什么要学习 Web 标准"></a>3.1 为什么要学习 Web 标准</h4><p>遵循 Web 标准除了可以让不同的开发人员写出的页面更标准、更统一外，还有很多优点。  </p><h4 id="3-2-Web-标准的构成"><a href="#3-2-Web-标准的构成" class="headerlink" title="3.2 Web 标准的构成"></a>3.2 Web 标准的构成</h4><p>主要包括<strong>结构（Structure）</strong> 、<strong>表现（Presentation）</strong>和<strong>行为（Behavior）</strong>三个方面。  </p><table><thead><tr><th>标准</th><th>说明</th></tr></thead><tbody><tr><td>结构</td><td>用于对<strong>网页元素</strong>进行整理和分类，如HTML</td></tr><tr><td>表现</td><td>用于设置网页版式、颜色、大小等<strong>外观样式</strong>，如CSS</td></tr><tr><td>行为</td><td>指网页模型的定义以及<strong>交互</strong>的编写，如JavaScript</td></tr></tbody></table><p>Web 标准提出的最佳体验方案：结构、样式、行为相分离。  </p><h2 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h2><h3 id="1-HTML语法规范"><a href="#1-HTML语法规范" class="headerlink" title="1 HTML语法规范"></a>1 HTML语法规范</h3><h4 id="1-1-基本语法概述"><a href="#1-1-基本语法概述" class="headerlink" title="1.1 基本语法概述"></a>1.1 基本语法概述</h4><p>由尖括号包围，分为单标签和双标签。  </p><h4 id="1-2-标签关系"><a href="#1-2-标签关系" class="headerlink" title="1.2 标签关系"></a>1.2 标签关系</h4><p><strong>包含关系</strong>和<strong>并列关系</strong>。  </p><h3 id="2-HTML-基本结构标签"><a href="#2-HTML-基本结构标签" class="headerlink" title="2 HTML 基本结构标签"></a>2 HTML 基本结构标签</h3><p>每个网页都会有一个基本的结构标签（也称为骨架标签），页面内容也是在这些基本标签上书写。   </p><p><code>&lt;html&gt;、&lt;head&gt;、&lt;title&gt;、&lt;body&gt;</code>  </p><h3 id="3-网页开发工具"><a href="#3-网页开发工具" class="headerlink" title="3 网页开发工具"></a>3 网页开发工具</h3><h3 id="4-HTML-常用标签"><a href="#4-HTML-常用标签" class="headerlink" title="4 HTML 常用标签"></a>4 HTML 常用标签</h3><table><thead><tr><th>语义</th><th>格式</th><th>属性</th></tr></thead><tbody><tr><td>标题标签</td><td><code>&lt;h1&gt;~&lt;h6&gt;</code></td><td></td></tr><tr><td>段落和换行</td><td><code>&lt;p&gt;</code> <code>&lt;br&gt;</code></td><td></td></tr><tr><td>加粗和倾斜</td><td><code>&lt;strong&gt;</code> <code>&lt;em&gt;</code></td><td></td></tr><tr><td>盒子</td><td><code>&lt;div&gt;</code> <code> &lt;span&gt;</code></td><td></td></tr><tr><td>图像</td><td><code>&lt;img  src="图像URL"&gt;</code></td><td>src / alt / title / width / height</td></tr><tr><td>超链接</td><td><code>&lt;a&gt;</code></td><td>herf / target(打开方式)</td></tr></tbody></table><p>超链接分类：内部链接、外部链接、空链接、下载链接、锚点链接、网页元素链接  </p><h3 id="5-HTML-中的注释和特殊字符"><a href="#5-HTML-中的注释和特殊字符" class="headerlink" title="5 HTML 中的注释和特殊字符"></a>5 HTML 中的注释和特殊字符</h3><h4 id="5-1-注释"><a href="#5-1-注释" class="headerlink" title="5.1 注释"></a>5.1 注释</h4><p><code>&lt;!--  --&gt;</code> 快捷键：<code>ctrl</code>+<code>/</code>  </p><h4 id="5-2-特殊字符"><a href="#5-2-特殊字符" class="headerlink" title="5.2 特殊字符"></a>5.2 特殊字符</h4><table><thead><tr><th align="center">特殊字符</th><th align="center">代码</th></tr></thead><tbody><tr><td align="center">（空格）</td><td align="center">&amp;nbsp</td></tr><tr><td align="center"><code>&lt;</code></td><td align="center">&amp;lt</td></tr><tr><td align="center"><code>&gt;</code></td><td align="center">&amp;gt</td></tr></tbody></table><h3 id="6-表格标签-lt-table-gt"><a href="#6-表格标签-lt-table-gt" class="headerlink" title="6 表格标签 <table>"></a>6 表格标签 <code>&lt;table&gt;</code></h3><h4 id="6-1-基本语法"><a href="#6-1-基本语法" class="headerlink" title="6.1 基本语法"></a>6.1 基本语法</h4><table><thead><tr><th>标签</th><th>作用</th></tr></thead><tbody><tr><td><code>&lt;table&gt;</code></td><td>用于定义表格的标签</td></tr><tr><td><code>&lt;tr&gt;</code></td><td>表格中的行，必须嵌套在 <code>&lt;table&gt; &lt;/table&gt;</code>标签中</td></tr><tr><td><code>&lt;td&gt;</code></td><td>表格中的单元格，必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中</td></tr><tr><td><code>&lt;th&gt;</code></td><td>表格中的表头，必须嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>标签中</td></tr></tbody></table><table><thead><tr><th>标签</th><th>作用</th></tr></thead><tbody><tr><td><code>&lt;thead&gt;</code></td><td>表格的头部区域</td></tr><tr><td><code>&lt;tbody&gt;</code></td><td>表格的主体</td></tr></tbody></table><p>用于分清表格结构</p><h4 id="6-2-合并单元格"><a href="#6-2-合并单元格" class="headerlink" title="6.2 合并单元格"></a>6.2 合并单元格</h4><table><thead><tr><th align="center">合并方式</th><th align="center">属性描述</th></tr></thead><tbody><tr><td align="center">跨行合并</td><td align="center">rowspan=”合并单元格的个数”</td></tr><tr><td align="center">跨列合并</td><td align="center">colspan=”合并单元格的个数”</td></tr></tbody></table><p><strong>步骤：</strong></p><ol><li>先确定是跨行还是跨列合并。</li><li>找到目标单元格. 写上合并方式 = 合并的单元格数量。比如：<code>&lt;td colspan="2"&gt;&lt;/td&gt;</code>。</li><li>删除多余的单元格。   </li></ol><h3 id="7-列表标签"><a href="#7-列表标签" class="headerlink" title="7 列表标签"></a>7 列表标签</h3><table><thead><tr><th align="center">标签</th><th align="center">名称</th></tr></thead><tbody><tr><td align="center"><code>&lt;ul&gt;</code></td><td align="center">无序列表</td></tr><tr><td align="center"><code>&lt;li&gt;</code></td><td align="center">列表项</td></tr><tr><td align="center"><code>&lt;ol&gt;</code></td><td align="center">有序列表</td></tr><tr><td align="center"><code>&lt;dl&gt;</code></td><td align="center">自定义列表</td></tr><tr><td align="center"><code>&lt;dt&gt;</code></td><td align="center">定义项目</td></tr><tr><td align="center"><code>&lt;dd&gt;</code></td><td align="center">描述项目</td></tr></tbody></table><h4 id="7-1-无序列表"><a href="#7-1-无序列表" class="headerlink" title="7.1 无序列表"></a>7.1 无序列表</h4><pre class="line-numbers language-none"><code class="language-none">&lt;ul&gt;    &lt;li&gt;列表项1&lt;/li&gt;    &lt;li&gt;列表项2&lt;/li&gt;    ...&lt;/ul&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-2-有序列表"><a href="#7-2-有序列表" class="headerlink" title="7.2 有序列表"></a>7.2 有序列表</h4><pre class="line-numbers language-none"><code class="language-none">&lt;ol&gt;    &lt;li&gt;列表项1&lt;/li&gt;    &lt;li&gt;列表项2&lt;/li&gt;    ...&lt;/ol&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-3-自定义列表"><a href="#7-3-自定义列表" class="headerlink" title="7.3 自定义列表"></a>7.3 自定义列表</h4><pre class="line-numbers language-none"><code class="language-none">&lt;dl&gt;    &lt;dt&gt;名词1&lt;/dt&gt;    &lt;dd&gt;名词1解释1&lt;/dd&gt;    &lt;dd&gt;名词1解释2&lt;/dd&gt;    &lt;dt&gt;名词2&lt;/dt&gt;    ...&lt;/dl&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-表单标签"><a href="#8-表单标签" class="headerlink" title="8 表单标签"></a>8 表单标签</h3><h4 id="8-1-表单的作用"><a href="#8-1-表单的作用" class="headerlink" title="8.1 表单的作用"></a>8.1 表单的作用</h4><p>收集用户信息。  </p><h4 id="8-2-表单的组成"><a href="#8-2-表单的组成" class="headerlink" title="8.2 表单的组成"></a>8.2 表单的组成</h4><p>表单域、表单控件（也称为表单元素）和提示信息。   </p><h4 id="8-3-表单域"><a href="#8-3-表单域" class="headerlink" title="8.3 表单域"></a>8.3 表单域</h4><p>表单域是一个包含表单元素的区域。    </p><p>在 HTML 标签中，<code>&lt;form&gt;</code> 标签用于定义表单域，以实现用户信息的收集和传递。  </p><p><code>&lt;form&gt;</code> 会把它范围内的表单元素信息提交给服务器。</p><table><thead><tr><th>属性</th><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td>action</td><td>URL地址</td><td>指定接受并处理表单数据的URL地址</td></tr><tr><td>method</td><td>get / post</td><td>设置表单提交方式</td></tr><tr><td>name</td><td>名称</td><td>指定表单名称</td></tr></tbody></table><h4 id="8-4-表单控件"><a href="#8-4-表单控件" class="headerlink" title="8.4 表单控件"></a>8.4 表单控件</h4><h5 id="8-4-1-lt-input-gt-表单元素"><a href="#8-4-1-lt-input-gt-表单元素" class="headerlink" title="8.4.1 <input>表单元素"></a>8.4.1 <code>&lt;input&gt;</code>表单元素</h5><p>在英文单词中，input 是输入的意思，而在表单元素中 <code>&lt;input&gt;</code> 标签用于收集用户信息。  </p><p>type属性用于指定不同的控件类型。</p><table><thead><tr><th>属性值</th><th align="center">描述</th></tr></thead><tbody><tr><td>button</td><td align="center">普通按钮</td></tr><tr><td>checkbox</td><td align="center">多选按钮</td></tr><tr><td>file</td><td align="center">文件上传</td></tr><tr><td>password</td><td align="center">密码字段</td></tr><tr><td>radio</td><td align="center">单选按钮</td></tr><tr><td>submit</td><td align="center">提交按钮</td></tr><tr><td>text</td><td align="center">单行输入字段</td></tr></tbody></table><p>随用随查。  </p><p>除了type属性之外，<code>&lt;input&gt;</code>还有其他属性，常用的如下：  </p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>规定input元素名称</td></tr><tr><td>value</td><td>规定input元素值</td></tr><tr><td>checked</td><td>规定首次加载时应当被选中</td></tr><tr><td>maxlength</td><td>规定输入字符串最大长度</td></tr></tbody></table><h5 id="8-4-2-lt-label-gt-标签"><a href="#8-4-2-lt-label-gt-标签" class="headerlink" title="8.4.2 <label>标签"></a>8.4.2 <code>&lt;label&gt;</code>标签</h5><p><code>&lt;label&gt;</code> 标签为 input 元素定义标注（标签）。  </p><p><code>&lt;label&gt;</code> 标签用于绑定一个表单元素, 当点击<code>&lt;label&gt;</code> 标签内的文本时，浏览器就会自动将焦点(光标)转到或者</p><p>选择对应的表单元素上，用来增加用户体验。  </p><h5 id="8-4-3-lt-select-gt-表单元素"><a href="#8-4-3-lt-select-gt-表单元素" class="headerlink" title="8.4.3 <select>表单元素"></a>8.4.3 <code>&lt;select&gt;</code>表单元素</h5><p>定义下拉列表。</p><pre class="line-numbers language-none"><code class="language-none">&lt;select&gt;    &lt;option&gt;选项1&lt;/option&gt;    &lt;option&gt;选项2&lt;/option&gt;    &lt;option&gt;选项3&lt;/option&gt;&lt;/select&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><code>&lt;select&gt;</code> 中至少包含一对<code>&lt;option&gt;</code> 。  </p></li><li><p>在<code>&lt;option&gt;</code> 中定义 selected = “selected” 时，当前项即为默认选中项。  </p></li></ol><h5 id="8-4-4-lt-textarea-gt-标签"><a href="#8-4-4-lt-textarea-gt-标签" class="headerlink" title="8.4.4 <textarea>标签"></a>8.4.4 <code>&lt;textarea&gt;</code>标签</h5><p>在表单元素中，<code>&lt;textarea&gt;</code> 标签是用于定义多行文本输入的控件。</p><pre class="line-numbers language-none"><code class="language-none">&lt;textarea rows="3" cols="20"&gt;    文本内容&lt;/textarea&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> HTML </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 使用方法</title>
      <link href="/2021/06/18/markdown/"/>
      <url>/2021/06/18/markdown/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown-使用方法"><a href="#Markdown-使用方法" class="headerlink" title="Markdown 使用方法"></a>Markdown 使用方法</h1><h2 id="1-什么是-Markdown"><a href="#1-什么是-Markdown" class="headerlink" title="1 什么是 Markdown"></a>1 什么是 Markdown</h2><p>Markdown语言的目的是希望大家使用易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的XHTML（或是HTML）。  </p><p>简单地说，Markdown与HTML语言一样，使用一些符号代替样式。但是它比HTML语言更加简单。  </p><h3 id="Markdown文件的工作原理"><a href="#Markdown文件的工作原理" class="headerlink" title="Markdown文件的工作原理"></a>Markdown文件的工作原理</h3><p>Markdown文件在显示时先被处理器转化为HTML文件，再通过web浏览器显示出来。</p><p><img src="principle.png"></p><p>被转化的过程中文件样式如下：  </p><p><img src="transfer.png"></p><p>Markdown 的本质是让我们回归到内容本身，注重文章本身的结构，而不是样式。 </p><h2 id="2-怎么使用-Markdown"><a href="#2-怎么使用-Markdown" class="headerlink" title="2 怎么使用 Markdown"></a>2 怎么使用 Markdown</h2><h3 id="2-1-标题"><a href="#2-1-标题" class="headerlink" title="2.1 标题"></a>2.1 标题</h3><p>Markdown的标题写法有两种</p><h4 id="2-1-1-ATX-标题"><a href="#2-1-1-ATX-标题" class="headerlink" title="2.1.1 ATX 标题"></a>2.1.1 ATX 标题</h4><p>在标题文本的前面加 “#” 来表示，”#” 的个数代表标题的级数， “#” 后面加上一个空格，最多有六级标题。</p><ul><li>示例</li></ul><pre class="line-numbers language-none"><code class="language-none"># 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题##### 这是六级标题<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2-Setext-标题"><a href="#2-1-2-Setext-标题" class="headerlink" title="2.1.2 Setext 标题"></a>2.1.2 Setext 标题</h4><p>在文字下方加上两个以上的 “=” （一阶标题）或者 “-“ （二阶标题）。</p><h3 id="2-2-字体"><a href="#2-2-字体" class="headerlink" title="2.2 字体"></a>2.2 字体</h3><p>修改字体通过将要修改的文字部分用 “*” 或者 “~” 包围，基本功能如下：</p><table><thead><tr><th align="center">功能</th><th align="center">示例</th><th align="center">效果</th></tr></thead><tbody><tr><td align="center">加粗</td><td align="center"><code>**加粗**</code></td><td align="center"><strong>加粗</strong></td></tr><tr><td align="center">斜体</td><td align="center"><code>*斜体*</code></td><td align="center"><em>斜体</em></td></tr><tr><td align="center">斜体加粗</td><td align="center"><code>***斜体加粗***</code></td><td align="center"><em><strong>斜体加粗</strong></em></td></tr><tr><td align="center">删除线</td><td align="center"><code>~~删除线~~</code></td><td align="center"><del>删除线</del></td></tr></tbody></table><h3 id="2-3-引用"><a href="#2-3-引用" class="headerlink" title="2.3 引用"></a>2.3 引用</h3><p>在要引用的文字前加上”&gt;”即可表示引用，也可多层嵌套。</p><ul><li>示例</li></ul><pre class="line-numbers language-none"><code class="language-none">&gt;引用&gt;&gt;引用之引用&gt;&gt;&gt;&gt;引用之引用之引用之引用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>效果</li></ul><blockquote><p>引用</p><blockquote><p>引用之引用</p><blockquote><blockquote><p>引用之引用之引用之引用</p></blockquote></blockquote></blockquote></blockquote><h3 id="2-4-分割线"><a href="#2-4-分割线" class="headerlink" title="2.4 分割线"></a>2.4 分割线</h3><p>用三个或三个以上的”-“或”*”表示即可，在使用<code>---</code>分割时注意与上文空行，否则会解析为Setext二级标题。</p><ul><li>示例</li></ul><pre class="line-numbers language-none"><code class="language-none">***----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>效果</li></ul><hr><hr><h3 id="2-5-表格"><a href="#2-5-表格" class="headerlink" title="2.5 表格"></a>2.5 表格</h3><ul><li>语法</li></ul><pre class="line-numbers language-none"><code class="language-none">| 表头 | 表头  | 表头 || ---- | :---: | ---: || 内容 | 内容  | 内容 || 内容 | 内容  | 内容 |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在第二行分割表头和内容，”-“ 符号至少有一个。<br>当前列的表格内的文字默认居左，在两边加 “:” 表示居中，在右边加 “:” 表示居右。  </p><ul><li>示例</li></ul><pre class="line-numbers language-none"><code class="language-none">| 省内排名 |         大学         | 全国排名 || :------: | :------------------: | :------: ||    1     |     华中科技大学     |    8     ||    2     |       武汉大学       |    9     ||    3     |     华中农业大学     |    42    ||    4     |     华中师范大学     |    46    ||    5     | 中国地质大学（武汉） |    48    ||    6     |     武汉理工大学     |    55    |<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>效果</li></ul><table><thead><tr><th align="center">省内排名</th><th align="center">大学</th><th align="center">全国排名</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">华中科技大学</td><td align="center">8</td></tr><tr><td align="center">2</td><td align="center">武汉大学</td><td align="center">9</td></tr><tr><td align="center">3</td><td align="center">华中农业大学</td><td align="center">42</td></tr><tr><td align="center">4</td><td align="center">华中师范大学</td><td align="center">46</td></tr><tr><td align="center">5</td><td align="center">中国地质大学（武汉）</td><td align="center">48</td></tr><tr><td align="center">6</td><td align="center">武汉理工大学</td><td align="center">55</td></tr></tbody></table><h3 id="2-6-图片"><a href="#2-6-图片" class="headerlink" title="2.6 图片"></a>2.6 图片</h3><p>插入图片</p><ul><li>格式</li></ul><pre class="line-numbers language-none"><code class="language-none">![alt](图片地址 "title")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当图片加载不出来的时候会显示alt的内容；<br>当鼠标悬停在图片上时，显示title处的内容。<br>alt和title的内容可以不写。</p><ul><li>示例</li></ul><pre class="line-numbers language-none"><code class="language-none">![](markdown.png)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>效果</li></ul><p><img src="markdown.png"></p><h3 id="2-7-超链接"><a href="#2-7-超链接" class="headerlink" title="2.7 超链接"></a>2.7 超链接</h3><p>在文本中插入超链接后，点击超链接即可跳转到对应的网站。</p><ul><li>语法</li></ul><pre class="line-numbers language-none"><code class="language-none">[超链接名](超链接地址 "title")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>title的含义与图片处解释相同，可以不写。</p><ul><li>示例</li></ul><pre class="line-numbers language-none"><code class="language-none">[百度](http://baidu.com)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>效果</li></ul><p><a href="http://baidu.com/">百度</a>  </p><h3 id="2-8-列表"><a href="#2-8-列表" class="headerlink" title="2.8 列表"></a>2.8 列表</h3><p>列表分为有序列表和无序列表。</p><h4 id="2-8-1-无序列表"><a href="#2-8-1-无序列表" class="headerlink" title="2.8.1 无序列表"></a>2.8.1 无序列表</h4><ul><li>语法<br>无序列表用 “-“ 、 “+” 、 “*” 任何一种都可以。</li></ul><pre class="line-numbers language-none"><code class="language-none">- 列表内容+ 列表内容* 列表内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意： “-“ 、 “+” 、 “*” 跟内容之间都要有一个空格。</p><ul><li>效果</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><h4 id="2-8-2-有序列表"><a href="#2-8-2-有序列表" class="headerlink" title="2.8.2 有序列表"></a>2.8.2 有序列表</h4><ul><li>语法</li></ul><p>数字加”.”</p><pre class="line-numbers language-none"><code class="language-none">1. 列表内容2. 列表内容3. 列表内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：序号跟内容之间要有空格</p><ul><li>效果</li></ul><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h4 id="2-8-3-列表的嵌套"><a href="#2-8-3-列表的嵌套" class="headerlink" title="2.8.3 列表的嵌套"></a>2.8.3 列表的嵌套</h4><p>在上一级和下一级之间加三个空格即可。</p><ul><li>示例</li></ul><pre class="line-numbers language-none"><code class="language-none">1. 列表内容   + 列表内容   + 列表内容2. 列表内容   + 列表内容+ 列表内容   + 列表内容      + 列表内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>效果</li></ul><ol><li>列表内容<ul><li>列表内容</li><li>列表内容</li></ul></li><li>列表内容<ul><li>列表内容</li></ul></li></ol><ul><li>列表内容<ul><li>列表内容<ul><li>列表内容</li></ul></li></ul></li></ul><h3 id="2-9-代码"><a href="#2-9-代码" class="headerlink" title="2.9 代码"></a>2.9 代码</h3><p>单行代码用两个反引号”`”括起来即可<br>代码块用”```”括起来，且两边的反引号要单独占一行</p><ul><li>示例</li></ul><pre class="line-numbers language-none"><code class="language-none">`代码内容`(```  代码...  代码...  代码...```)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（这里加括号是为了防止转译，实际上没有）</p><ul><li>效果</li></ul><p><code>代码内容</code></p><pre class="line-numbers language-none"><code class="language-none">代码...代码...代码...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>基本语法如上，它的功能还不止这些，Markdown还可以用来画流程图等等。</p><h2 id="3-Markdown-语法规范"><a href="#3-Markdown-语法规范" class="headerlink" title="3 Markdown 语法规范"></a>3 Markdown 语法规范</h2><p>Markdown 设计之初没有明确的语法规范，随着 Markdown 被更多的人使用，这种不规范直接导致了多种 Markdown 语法的变体，Markdown 解析器也变得混乱，无法统一。</p><p>2017 年 GitHub 发布了 Markdown GFM（GitHub Flavored Markdown） 标准规范，并且修改了 GitHub 的 Markdown 解析器以规范用户行为。</p><h3 id="3-1-语法规范建议"><a href="#3-1-语法规范建议" class="headerlink" title="3.1 语法规范建议"></a>3.1 语法规范建议</h3><p>推荐使用 GitHub GFM 规范。</p><h3 id="3-2-标题格式建议"><a href="#3-2-标题格式建议" class="headerlink" title="3.2 标题格式建议"></a>3.2 标题格式建议</h3><p>推荐使用 ATX 标题规范。<br>文章中尽量避免四级标题，三级标题下的并列内容建议使用列表。</p><h3 id="3-3-空行"><a href="#3-3-空行" class="headerlink" title="3.3 空行"></a>3.3 空行</h3><ul><li>不要有多余的空行<br>在 Markdown 文本中，想要做到渲染后真换行通常是使用两个空格加一个回车换行符，或者粗暴地空一行，但是不要连续空两行及以上。  </li><li>文件末尾空一行<br>强烈建议文件末尾空一行，大多数格式检查工具都会检查文件末尾的空行。文件末尾增加空行的可能原因是为了方便进行文件拼接处理。</li><li>标题前后各空一行  </li></ul><h3 id="3-4-空格"><a href="#3-4-空格" class="headerlink" title="3.4 空格"></a>3.4 空格</h3><ul><li>中英文之间需要增加空格</li><li>中文与数字之间需要增加空格</li><li>数字与单位之间需要增加空格</li><li>全角标点与其他字符之间不加空格</li></ul><h3 id="3-5-标点符号"><a href="#3-5-标点符号" class="headerlink" title="3.5 标点符号"></a>3.5 标点符号</h3><p>不重复使用标点符号</p><h3 id="3-6-全角和半角"><a href="#3-6-全角和半角" class="headerlink" title="3.6 全角和半角"></a>3.6 全角和半角</h3><ul><li>使用全角中文标点</li><li>数字使用半角字符</li><li>遇到完整的英文整句、特殊名词，其内容使用半角标点</li></ul><h3 id="3-7-名词"><a href="#3-7-名词" class="headerlink" title="3.7 名词"></a>3.7 名词</h3><ul><li>专有名词使用正确的大小写</li><li>不要使用不地道的缩写</li></ul><h3 id="3-8-有争议的点"><a href="#3-8-有争议的点" class="headerlink" title="3.8 有争议的点"></a>3.8 有争议的点</h3><p>无论是否遵循下述规则，从语法的角度来讲都是 <strong>正确</strong> 的。</p><ul><li><p>链接之间增加空格</p></li><li><p>加粗、斜体、高亮文本前后加空格</p></li><li><p>列表缩进</p><ul><li>建议使用 4 个空格进行文本缩进，尤其是遇到有序列表或者无序列表的时候。另外，在使用无序列表或者有序列表的时候，建议在上下级之间空一行，同级之间可以不空行。</li></ul></li><li><p>/ 的使用<br>建议 / 字符前后留空格，充当路径描述符的时候除外。</p></li><li><p>简体中文使用直角引号</p></li></ul><p>参考：  </p><ol><li><a href="http://gfm.docschina.org/zh-hans/">GitHub 风格的 Markdown 规范</a></li><li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines">中文文案排版指北</a></li><li><a href="https://zh.wikipedia.org/wiki/Markdown">Markdown - 维基百科</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
